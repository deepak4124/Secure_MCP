[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "mcp-security-framework"
dynamic = ["version"]
description = "A comprehensive security framework for Model Context Protocol (MCP) in Multi-Agent Systems (MAS)"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Secure MCP Research Team", email = "contact@mcp-security.org"}
]
maintainers = [
    {name = "Secure MCP Research Team", email = "contact@mcp-security.org"}
]
keywords = [
    "mcp", "model-context-protocol", "multi-agent-systems", "security",
    "trust", "identity", "authentication", "authorization", "mas",
    "langgraph", "autogen", "crewai", "semantic-kernel"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Security",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "pydantic>=2.0.0",
    "cryptography>=3.4.8",
    "aiohttp>=3.8.0",
    "pyyaml>=6.0",
    "numpy>=1.21.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-asyncio>=0.18.0",
    "pytest-cov>=2.10.0",
    "black>=21.0.0",
    "flake8>=3.8.0",
    "mypy>=0.800",
    "pre-commit>=2.10.0",
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=0.5.0",
    "myst-parser>=0.15.0",
]
langgraph = [
    "langgraph>=0.0.20",
    "langchain>=0.1.0",
    "langchain-core>=0.1.0",
]
autogen = [
    "pyautogen>=0.2.0",
]
crewai = [
    "crewai>=0.1.0",
]

[project.scripts]
mcp-security = "mcp_security_framework.cli:main"

[project.urls]
Homepage = "https://github.com/mcp-security/framework"
Documentation = "https://mcp-security.readthedocs.io/"
Repository = "https://github.com/mcp-security/framework"
"Bug Tracker" = "https://github.com/mcp-security/framework/issues"

[tool.setuptools_scm]
write_to = "mcp_security_framework/_version.py"

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "cryptography.*",
    "aiohttp.*",
    "yaml.*",
    "numpy.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["mcp_security_framework"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
